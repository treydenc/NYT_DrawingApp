"use client";
import { useState, useEffect } from 'react';
import P5Generative from '../../components/p5generative';
import * as XLSX from 'xlsx'; // To read the Excel file on the client side

export default function GenerativeNYT() {
  const [phrases, setPhrases] = useState([]);

  // Function to fetch the Excel file and read the titles
  const fetchPhrasesFromExcel = async () => {
    try {
      // Fetch the Excel file generated by the API
      const response = await fetch('/api/fetch-most-popular');
      const data = await response.json();

      if (response.ok) {
        const filePath = data.filePath;
        const fileResponse = await fetch(filePath);
        const blob = await fileResponse.blob();

        // Read the Excel file content
        const reader = new FileReader();
        reader.onload = (e) => {
          const arrayBuffer = e.target.result;
          const workbook = XLSX.read(arrayBuffer, { type: 'array' });

          // Extract the titles (phrases) from the first sheet
          const worksheet = workbook.Sheets[workbook.SheetNames[0]];
          const titles = XLSX.utils.sheet_to_json(worksheet, { header: 1 }).flat();

          // Set the phrases (article titles) for the p5.js sketch
          setPhrases(titles);
        };
        reader.readAsArrayBuffer(blob);
      } else {
        console.error('Error fetching Excel file:', data.error);
      }
    } catch (error) {
      console.error('Error fetching phrases:', error);
    }
  };

  // Fetch the phrases when the component mounts
  useEffect(() => {
    fetchPhrasesFromExcel();
  }, []);

  return (
    <div className="container mx-auto py-10">
      <h1 className="text-3xl font-bold text-center mb-8">Generative NYT Drawing App</h1>

      {/* Render the p5.js component once phrases are loaded */}
      {phrases.length > 0 ? (
        <P5Generative phrases={phrases} />
      ) : (
        <p>Loading phrases...</p>
      )}
    </div>
  );
}
